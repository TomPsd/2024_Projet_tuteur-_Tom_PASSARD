install.packages("rgrass")
install.packages("terra")
install.packages("sf")
install.packages("geodata")
install.packages("stars")
install.packages("stringr")
dir <- getwd()
setwd(dir)
dir <- getwd()
setwd(dir)
dir <- getwd()
setwd(dir)
dir <- getwd()
dir <- getwd()
library(parallel)
parallel::detectCores()
list.of.packages <- c(
"foreach",
"doParallel",
"ranger",
"palmerpenguins",
"tidyverse",
"kableExtra"
)
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
new.packages
parallel::detectCores()
n.cores <- parallel::detectCores() - 1
#create the cluster
my.cluster <- parallel::makeCluster(
n.cores,
type = "FORK"
)
#check cluster definition (optional)
print(my.cluster)
new.packages
list.of.packages <- c(
"foreach",
"doParallel"#,
# "ranger",
# "palmerpenguins",
# "tidyverse",
# "kableExtra"
)
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
new.packages
if(length(new.packages) > 0){
install.packages(new.packages, dep=TRUE)
}
for(package.i in list.of.packages){
suppressPackageStartupMessages(
library(
package.i,
character.only = TRUE
)
)
}
#check cluster definition (optional)
print(my.cluster)
#register it to be used by %dopar%
doParallel::registerDoParallel(cl = my.cluster)
#check if it is registered (optional)
foreach::getDoParRegistered()
#how many workers are available? (optional)
foreach::getDoParWorkers()
x <- foreach(
i = 1:10,
.combine = 'c'
) %dopar% {
sqrt(i)
}
x
parallel::stopCluster(cl = my.cluster)
parallel::stopCluster(cl = my.cluster)
n.cores <- parallel::detectCores() - 1
#create the cluster
my.cluster <- parallel::makeCluster(
n.cores,
type = "FORK"
)
#check cluster definition (optional)
print(my.cluster)
#register it to be used by %dopar%
doParallel::registerDoParallel(cl = my.cluster)
#check if it is registered (optional)
foreach::getDoParRegistered()
#how many workers are available? (optional)
foreach::getDoParWorkers()
x <- foreach(
i = 1:10,
.combine = 'c'
) %dopar% {
sqrt(i)
}
x
parallel::stopCluster(cl = my.cluster)
x <- foreach(
i = 1:10,
.combine = 'c'
) %dopar% {
sqrt(i)
}
install.packages("FAOSTAT")
# Install and load used packages
pacman::p_load(reticulate, rstudioapi)
conda_list()
conda_list()
View(conda_list)
use_condaenv("r-reticulate")
# Install and load used packages
pacman::p_load(reticulate, rstudioapi, findpython)
# Indicate anaconda environment
find_python_cmd(minimum_version = '2.5')
# Indicate anaconda environment
find_python_cmd(minimum_version = '3.11')
# Install and load used packages
pacman::p_load(findpython)
find_python_cmd(minimum_version = '3.11')
pacman::p_load(reticulate, rstudioapi, findpython)
find_python_cmd(minimum_version = '3.11')
# Install and load used packages
pacman::p_load(findpython, reticulate, rstudioapi)
# Indicate anaconda environment
find_python_cmd(minimum_version = '3.11')
# Indicate anaconda environment
python_path <- find_python_cmd(minimum_version = '3.11')
use_python(python_path)
# Set up directory
dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(dir)
# Run python scripts
for (file in list.files(path = dir, pattern = ".py")){
source_python(file)
}
py_install("pandas")
# Run python scripts
for (file in list.files(path = dir, pattern = ".py")){
source_python(file)
}
import("pandas")
use_python(python_path)
py_install("pandas")
# Install pacman package if not installed
if (!("pacman" %in% rownames(installed.packages()))) {
install.packages("pacman")
}
# Install and load used packages
pacman::p_load(findpython, reticulate, rstudioapi)
# Indicate anaconda environment
use_condaenv("/Applications/anaconda3/bin/python")
# UN Comtrade data import
# Install pacman package if not installed
if (!("pacman" %in% rownames(installed.packages()))) {
install.packages("pacman")
}
# Install and load used packages
pacman::p_load(findpython, reticulate, rstudioapi)
# Indicate anaconda environment
use_condaenv("/Applications/anaconda3/bin/python")
# Set up directory
dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(dir)
# Run python scripts
for (file in list.files(path = dir, pattern = ".py")){
source_python(file)
}
# Get apikey
apikey <- readLines(list.files(path = dir, pattern = ".txt"))
# Set up parameters
years <- paste(2010:2012,
sep = "",
collapse = ",")
cmd_code <- paste(c("4403", "4407", "4408", "8703"),
sep = "",
collapse = ",")
flow_code <- paste(c("M", "X"),
sep = "",
collapse = ",")
# Store data into a data.frame
trade_data <- get_UN_Comtrade_data(apikey,
year = years,
cmd = cmd_code,
flow = flow_code)
head(trade_data)
unique(trade_data$period)
unique(trade_data$cmdCode)
paste(unique(trade_data$period), sep = "", collapse = ",") == years
c("4403", "4407", "4408", "8703")
sort(c("4403", "4407", "4408", "8703"))
sort(c("4409", "4407", "4408", "8703"))
# Set up parameters
years <- paste(2010:2012,
sep = "",
collapse = ",")
cmd_code <- paste(sort(c("4403", "4407", "4408")),
sep = "",
collapse = ",")
flow_code <- paste(sort(c("M", "X")),
sep = "",
collapse = ",")
tests <- c(paste(unique(trade_data$period), sep = "", collapse = ",") == years,
paste(unique(trade_data$cmdCode), sep = "", collapse = ",") == cmd_code,
paste(unique(trade_data$flowCode), sep = "", collapse = ",") == flow_code)
tests
paste(unique(trade_data$cmdCode), sep = "", collapse = ",")
# Store data into a data.frame
trade_data <- get_UN_Comtrade_data(apikey,
year = years,
cmd = cmd_code,
flow = flow_code)
tests
# Test if data has been correctly downloaded
tests <- c(paste(unique(trade_data$period), sep = "", collapse = ",") == years,
paste(unique(trade_data$cmdCode), sep = "", collapse = ",") == cmd_code,
paste(unique(trade_data$flowCode), sep = "", collapse = ",") == flow_code)
tests
all(tests)
if (all(tests)){
print("Data have been correctly downloaded.")
}else{
print("ERROR: a problem has been identified in data download.")
}
